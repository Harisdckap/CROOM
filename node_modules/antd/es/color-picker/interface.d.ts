import type { CSSProperties, FC, ReactNode } from 'react';
<<<<<<< HEAD
import type { ColorPickerProps as RcColorPickerProps } from '@rc-component/color-picker';
import type { SizeType } from '../config-provider/SizeContext';
import type { PopoverProps } from '../popover';
import type { TooltipPlacement } from '../tooltip';
import type { Color } from './color';
=======
import type { ColorGenInput, ColorPickerProps as RcColorPickerProps } from '@rc-component/color-picker';
import type { SizeType } from '../config-provider/SizeContext';
import type { PopoverProps } from '../popover';
import type { TooltipPlacement } from '../tooltip';
import type { AggregationColor } from './color';
export type { ColorGenInput };
export type Colors<T> = {
    color: ColorGenInput<T>;
    percent: number;
}[];
>>>>>>> bcc87c1c18f9bd3a2f944eca20e5123d13d72859
export declare enum ColorFormat {
    hex = "hex",
    rgb = "rgb",
    hsb = "hsb"
}
export type ColorFormatType = keyof typeof ColorFormat;
export interface PresetsItem {
    label: ReactNode;
<<<<<<< HEAD
    colors: (string | Color)[];
=======
    colors: (string | AggregationColor)[];
>>>>>>> bcc87c1c18f9bd3a2f944eca20e5123d13d72859
    /**
     * Whether the initial state is collapsed
     * @since 5.11.0
     * @default true
     */
    defaultOpen?: boolean;
}
export type TriggerType = 'click' | 'hover';
export type TriggerPlacement = TooltipPlacement;
<<<<<<< HEAD
export interface ColorPickerBaseProps {
    color?: Color;
    prefixCls: string;
    format?: ColorFormatType;
    allowClear?: boolean;
    disabled?: boolean;
    disabledAlpha?: boolean;
    presets?: PresetsItem[];
    panelRender?: ColorPickerProps['panelRender'];
    onFormatChange?: ColorPickerProps['onFormatChange'];
    onChangeComplete?: ColorPickerProps['onChangeComplete'];
}
export type ColorValueType = Color | string | null;
export type ColorPickerProps = Omit<RcColorPickerProps, 'onChange' | 'value' | 'defaultValue' | 'panelRender' | 'disabledAlpha' | 'onChangeComplete'> & {
=======
export type SingleValueType = AggregationColor | string;
export type ColorValueType = SingleValueType | null | {
    color: SingleValueType;
    percent: number;
}[];
export type ModeType = 'single' | 'gradient';
export type ColorPickerProps = Omit<RcColorPickerProps, 'onChange' | 'value' | 'defaultValue' | 'panelRender' | 'disabledAlpha' | 'onChangeComplete' | 'components'> & {
    mode?: ModeType | ModeType[];
>>>>>>> bcc87c1c18f9bd3a2f944eca20e5123d13d72859
    value?: ColorValueType;
    defaultValue?: ColorValueType;
    children?: React.ReactNode;
    open?: boolean;
    disabled?: boolean;
    placement?: TriggerPlacement;
    trigger?: TriggerType;
    format?: ColorFormatType;
    defaultFormat?: ColorFormatType;
    allowClear?: boolean;
    presets?: PresetsItem[];
    arrow?: boolean | {
        pointAtCenter: boolean;
    };
    panelRender?: (panel: React.ReactNode, extra: {
        components: {
            Picker: FC;
            Presets: FC;
        };
    }) => React.ReactNode;
<<<<<<< HEAD
    showText?: boolean | ((color: Color) => React.ReactNode);
=======
    showText?: boolean | ((color: AggregationColor) => React.ReactNode);
>>>>>>> bcc87c1c18f9bd3a2f944eca20e5123d13d72859
    size?: SizeType;
    styles?: {
        popup?: CSSProperties;
        popupOverlayInner?: CSSProperties;
    };
    rootClassName?: string;
    disabledAlpha?: boolean;
    [key: `data-${string}`]: string;
    onOpenChange?: (open: boolean) => void;
    onFormatChange?: (format?: ColorFormatType) => void;
<<<<<<< HEAD
    onChange?: (value: Color, hex: string) => void;
    onClear?: () => void;
    onChangeComplete?: (value: Color) => void;
=======
    onChange?: (value: AggregationColor, hex: string) => void;
    onClear?: () => void;
    onChangeComplete?: (value: AggregationColor) => void;
>>>>>>> bcc87c1c18f9bd3a2f944eca20e5123d13d72859
} & Pick<PopoverProps, 'getPopupContainer' | 'autoAdjustOverflow' | 'destroyTooltipOnHide'>;
